DockerRepository:
  Type: AWS::ECR::Repository
  Properties:
    RepositoryName: ${self:custom.project}-${sls:stage}-repo
    LifecyclePolicy:
      LifecyclePolicyText: ${file(./infrastructure/common/dockerRepoLifecyclePolicy.js):dockerLifecyclePolicyKeepTen}
    Tags:
      - Key: project
        Value: ${self:custom.project}

EcsSecurityGroup:
  Type: AWS::EC2::SecurityGroup
  Properties:
    GroupDescription: Access from the ${sls:stage} load balancer to the ecs
    GroupName: ${self:custom.project}-${sls:stage}-ecs-securitygroup
    # VpcId: ${self:custom.vpcId}
    VpcId: 
      Fn::ImportValue:
        !Sub vpcId
    SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 3000
        ToPort: 3000
        SourceSecurityGroupId: !Ref SiteLoadBalancerSecurityGroup
    SecurityGroupEgress:
      - CidrIp: 0.0.0.0/0
        IpProtocol: -1
        FromPort: -1
        ToPort: -1
    Tags:
      - Key: project
        Value: ${self:custom.project}

EcsCluster:
  Type: AWS::ECS::Cluster
  Properties:
    ClusterName: ${self:custom.project}-${sls:stage}-cluster
    CapacityProviders:
      - FARGATE
      - FARGATE_SPOT
    Tags:
        - Key: project
          Value: ${self:custom.project}

DraftEcsLogGroup:
  Type: AWS::Logs::LogGroup
  Properties:
    LogGroupName: /ecs/${self:custom.project}-${sls:stage}-draft
    Tags:
        - Key: project
          Value: ${self:custom.project}

DraftTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ContainerDefinitions: 
        - Name: ${self:custom.project}
          Image: ${self:custom.ecrImage}
          Cpu: 0
          PortMappings:
            - ContainerPort: 3000
              HostPort: 3000
              Protocol: tcp
          Essential: true
          Environment:
            - Name: S3_BUCKET
              Value: ${self:custom.project}-${sls:stage}-media-storage
            - Name: BASE_API_URL
              Value: https://${self:custom.draftDomain}
            - Name: DRAFT
              Value: "true"
            - Name: MONGO_DB_PUB
              Value: ${self:custom.project}-${sls:stage}-pub
            - Name: MONGO_DB
              Value: ${self:custom.project}-${sls:stage}-draft
            - Name: BASE_CDN_IMAGE_URL2
              Value: https://${self:custom.draftDomain}/img2
            - Name: BOOKEASY_VCID
              Value: "153"
            - Name: DEBUG
              Value: "whppt:*,nuxt:*"
            - Name: BOOKEASY_LIVE
              Value: "true"
            - Name: ATDW_API_URL
              Value: atlas.atdw-online.com.au
            - Name: BASE_CDN_IMAGE_URL
              Value: https://${self:custom.draftDomain}/getImage
            - Name: BASE_IMAGE_URL
              Value: https://${self:custom.draftDomain}/img
            - Name: NODE_ENV
              Value: production
            - Name: BASE_URL
              Value: https://${self:custom.draftDomain}
            - Name: BOOKEASY_GADGET_KEY
              Value: 56ae41bd85ca2ca09f1a6e5cf8ff8bb1
            - Name: BOOKEASY_API_URL
              Value: webapi.bookeasy.com.au
            - Name: BASE_IMAGE_URL2
              Value: https://${self:custom.draftDomain}/img2
            - Name: S3_ACCESS_KEY_ID
              Value: !Ref MediaStorageUserAccessKey
            - Name: LEGACY_API_KEY
              Value: true
            - Name: EMAIL_AWS_REGION
              Value: ap-southeast-2
            - Name: EMAIL_AWS_ACCESS_KEYID
              Value: aaa
            - Name: EMAIL_AWS_SECRET_ACCESS_KEY
              Value: aaa
            - Name: EMAIL_FROM_ADDRESS
              Value: aaa
            - Name: EMAIL_FEEDBACK_ADDRESS
              Value: aaa
            - Name: JWT_AUDIENCE
              Value: Barossa
          MountPoints: []
          VolumesFrom: []
          Secrets:
            - Name: ATDW_API_KEY
              ValueFrom: atdw-api-key
            - Name: BOOKEASY_API_KEY
              ValueFrom: bookeasy-api-key
            - Name: CREATESEND_API_KEY
              ValueFrom: createsend-api-secret-key
            - Name: CREATESEND_CLIENT_ID
              ValueFrom: createsend-client-id
            - Name: MONGO_URL
              ValueFrom: mongo-connection-string-staging
            - Name: S3_SECRET_ACCESS_KEY
              ValueFrom: ${self:custom.project}-${sls:stage}-accessParam
            - Name: JWT_SECRET
              ValueFrom: jwt-secret
            - Name: APP_KEY
              ValueFrom: app-key
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: /ecs/${self:custom.project}-${sls:stage}-draft
              awslogs-region: ap-southeast-2
              awslogs-stream-prefix: ecs
      Cpu: 512
      # TaskRoleArn: arn:aws:iam::639652667719:role/ecsTaskExecutionRole
      TaskRoleArn:
        Fn::ImportValue: !Sub ecsRoleArn
      # ExecutionRoleArn: arn:aws:iam::639652667719:role/ecsTaskExecutionRole
      ExecutionRoleArn:
        Fn::ImportValue: !Sub ecsRoleArn
      Family: ${self:custom.project}-${sls:stage}-draft
      Memory: 1024
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Tags:
        - Key: project
          Value: ${self:custom.project}

DraftEcsService:
    Type: AWS::ECS::Service
    DependsOn:
      - SiteLoadBalancerListener443RuleDraftForwardRule
    Properties:
      ServiceName: ${self:custom.project}-draft
      Cluster: !Ref EcsCluster
      DesiredCount: 1
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          SecurityGroups: [
            { Fn::GetAtt: [EcsSecurityGroup, GroupId] }
          ]
          # Subnets: ${self:custom.privateSubnets}
          Subnets: 
            - Fn::ImportValue: !Sub privateSubnet1
            - Fn::ImportValue: !Sub privateSubnet2
            # - !Ref PrivateSubnet1
            # - !Ref PrivateSubnet2
      LoadBalancers:
        - ContainerName: ${self:custom.project}
          ContainerPort: 3000
          # LoadBalancerName: ${self:custom.project}-${sls:stage}-loadbalancer
          TargetGroupArn: !Ref DraftTargetGroup
      TaskDefinition: !Ref DraftTaskDefinition
      Tags:
        - Key: project
          Value: ${self:custom.project}

PubEcsLogGroup:
  Type: AWS::Logs::LogGroup
  Properties:
    LogGroupName: /ecs/${self:custom.project}-${sls:stage}-pub
    Tags:
        - Key: project
          Value: ${self:custom.project}

PubTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ContainerDefinitions: 
        - Name: ${self:custom.project}
          Image: ${self:custom.ecrImage}
          Cpu: 0
          PortMappings:
            - ContainerPort: 3000
              HostPort: 3000
              Protocol: tcp
          Essential: true
          Environment:
            - Name: S3_BUCKET
              Value: ${self:custom.project}-${sls:stage}-media-storage
            - Name: BASE_API_URL
              Value: https://${self:custom.pubDomain}
            - Name: DRAFT
              Value: "false"
            - Name: MONGO_DB_PUB
              Value: ${self:custom.project}-${sls:stage}-pub
            - Name: MONGO_DB
              Value: ${self:custom.project}-${sls:stage}-pub
            - Name: BASE_CDN_IMAGE_URL2
              Value: https://${self:custom.pubDomain}/img2
            - Name: BOOKEASY_VCID
              Value: "153"
            - Name: DEBUG
              Value: "whppt:*,nuxt:*"
            - Name: BOOKEASY_LIVE
              Value: "true"
            - Name: ATDW_API_URL
              Value: atlas.atdw-online.com.au
            - Name: BASE_CDN_IMAGE_URL
              Value: https://${self:custom.pubDomain}/getImage
            - Name: BASE_IMAGE_URL
              Value: https://${self:custom.pubDomain}/img
            - Name: NODE_ENV
              Value: production
            - Name: BASE_URL
              Value: https://${self:custom.pubDomain}
            - Name: BOOKEASY_GADGET_KEY
              Value: 56ae41bd85ca2ca09f1a6e5cf8ff8bb1
            - Name: BOOKEASY_API_URL
              Value: webapi.bookeasy.com.au
            - Name: BASE_IMAGE_URL2
              Value: https://${self:custom.pubDomain}/img2
            - Name: S3_ACCESS_KEY_ID
              Value: !Ref MediaStorageUserAccessKey
            - Name: LEGACY_API_KEY
              Value: true
            - Name: EMAIL_AWS_REGION
              Value: ap-southeast-2
            - Name: EMAIL_AWS_ACCESS_KEYID
              Value: aaa
            - Name: EMAIL_AWS_SECRET_ACCESS_KEY
              Value: aaa
            - Name: EMAIL_FROM_ADDRESS
              Value: aaa
            - Name: EMAIL_FEEDBACK_ADDRESS
              Value: aaa
            - Name: JWT_AUDIENCE
              Value: Barossa
          MountPoints: []
          VolumesFrom: []
          Secrets:
            - Name: ATDW_API_KEY
              ValueFrom: atdw-api-key
            - Name: BOOKEASY_API_KEY
              ValueFrom: bookeasy-api-key
            - Name: CREATESEND_API_KEY
              ValueFrom: createsend-api-secret-key
            - Name: CREATESEND_CLIENT_ID
              ValueFrom: createsend-client-id
            - Name: MONGO_URL
              ValueFrom: mongo-connection-string-staging
            - Name: S3_SECRET_ACCESS_KEY
              ValueFrom: ${self:custom.project}-${sls:stage}-accessParam
            - Name: JWT_SECRET
              ValueFrom: jwt-secret
            - Name: APP_KEY
              ValueFrom: app-key
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: /ecs/${self:custom.project}-${sls:stage}-pub
              awslogs-region: ap-southeast-2
              awslogs-stream-prefix: ecs
      Cpu: 512
      # TaskRoleArn: arn:aws:iam::639652667719:role/ecsTaskExecutionRole
      TaskRoleArn:
        Fn::ImportValue: !Sub ecsRoleArn
      # ExecutionRoleArn: arn:aws:iam::639652667719:role/ecsTaskExecutionRole
      ExecutionRoleArn:
        Fn::ImportValue: !Sub ecsRoleArn
      Family: ${self:custom.project}-${sls:stage}-pub
      Memory: 1024
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Tags:
        - Key: project
          Value: ${self:custom.project}

PubEcsService:
    Type: AWS::ECS::Service
    DependsOn:
      - SiteLoadBalancerListener443RuleApexRedirectRule
      - SiteLoadBalancerListener443RulePubForwardRule
    Properties:
      ServiceName: ${self:custom.project}-pub
      Cluster: !Ref EcsCluster
      DesiredCount: 1
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          SecurityGroups: [
            { Fn::GetAtt: [EcsSecurityGroup, GroupId] }
          ]
          # Subnets: ${self:custom.privateSubnets}
          Subnets: 
            - Fn::ImportValue: !Sub privateSubnet1
            - Fn::ImportValue: !Sub privateSubnet2
            # - !Ref PrivateSubnet1
            # - !Ref PrivateSubnet2
      LoadBalancers:
        - ContainerName: ${self:custom.project}
          ContainerPort: 3000
          # LoadBalancerName: ${self:custom.project}-${sls:stage}-loadbalancer
          TargetGroupArn: !Ref PubTargetGroup
      TaskDefinition: !Ref PubTaskDefinition
      Tags:
        - Key: project
          Value: ${self:custom.project}
          