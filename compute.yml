DraftDockerRepository:
  Type: AWS::ECR::Repository
  Properties:
    RepositoryName: ${self:custom.project}-draft-${sls:stage}-repo
    LifecyclePolicy:
      LifecyclePolicyText: ${self:custom.dockerRepoPolicyText}
    Tags:
      - Key: project
        Value: ${self:custom.project}

PubDockerRepository:
  Type: AWS::ECR::Repository
  Properties:
    RepositoryName: ${self:custom.project}-pub-${sls:stage}-repo
    LifecyclePolicy:
      LifecyclePolicyText: ${self:custom.dockerRepoPolicyText}
    Tags:
      - Key: project
        Value: ${self:custom.project}

EcsSecurityGroup:
  Type: AWS::EC2::SecurityGroup
  Properties:
    GroupDescription: Access from the ${sls:stage} load balancer to the ecs
    GroupName: ${self:custom.project}-${sls:stage}-ecs-securitygroup
    VpcId:
      Fn::ImportValue: !Sub vpcId
    SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: ${self:custom.appPort}
        ToPort: ${self:custom.appPort}
        SourceSecurityGroupId: !Ref SiteLoadBalancerSecurityGroup
    SecurityGroupEgress:
      - CidrIp: 0.0.0.0/0
        IpProtocol: -1
        FromPort: -1
        ToPort: -1
    Tags:
      - Key: project
        Value: ${self:custom.project}

EcsCluster:
  Type: AWS::ECS::Cluster
  Properties:
    ClusterName: ${self:custom.project}-${sls:stage}-cluster
    CapacityProviders:
      - FARGATE
      - FARGATE_SPOT
    Tags:
      - Key: project
        Value: ${self:custom.project}

DraftEcsLogGroup:
  Type: AWS::Logs::LogGroup
  Properties:
    LogGroupName: /ecs/${self:custom.project}-${sls:stage}-draft
    Tags:
      - Key: project
        Value: ${self:custom.project}

DraftTaskDefinition:
  Type: AWS::ECS::TaskDefinition
  Properties:
    ContainerDefinitions:
      - Name: ${self:custom.project}
        Image: !Join
          - ":"
          - - !GetAtt DraftDockerRepository.RepositoryUri
            - latest
        Cpu: 0
        PortMappings:
          - ContainerPort: ${self:custom.appPort}
            HostPort: ${self:custom.appPort}
            Protocol: tcp
        Essential: true
        Environment: ${self:custom.draftEnv}
        MountPoints: []
        VolumesFrom: []
        Secrets: ${self:custom.draftSecrets}
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group: /ecs/${self:custom.project}-${sls:stage}-draft
            awslogs-region: ap-southeast-2
            awslogs-stream-prefix: ecs
    Cpu: ${self:custom.cpuDraftTaskDefinition}
    TaskRoleArn:
      Fn::ImportValue: !Sub ecsRoleArn
    ExecutionRoleArn:
      Fn::ImportValue: !Sub ecsRoleArn
    Family: ${self:custom.project}-${sls:stage}-draft
    Memory: ${self:custom.memoryDraftTaskDefinition}
    NetworkMode: awsvpc
    RequiresCompatibilities:
      - FARGATE
    Tags:
      - Key: project
        Value: ${self:custom.project}

DraftEcsService:
  Type: AWS::ECS::Service
  DependsOn:
    - SiteLoadBalancerListener443RuleDraftForwardRule
  Properties:
    ServiceName: ${self:custom.project}-draft
    Cluster: !Ref EcsCluster
    DesiredCount: ${self:custom.desiredCountDraftEcsService}
    LaunchType: FARGATE
    NetworkConfiguration:
      AwsvpcConfiguration:
        SecurityGroups: [{ Fn::GetAtt: [EcsSecurityGroup, GroupId] }]
        Subnets:
          - Fn::ImportValue: !Sub privateSubnet1
          - Fn::ImportValue: !Sub privateSubnet2
    LoadBalancers:
      - ContainerName: ${self:custom.project}
        ContainerPort: ${self:custom.appPort}
        TargetGroupArn: !Ref DraftTargetGroup
    TaskDefinition: !Ref DraftTaskDefinition
    Tags:
      - Key: project
        Value: ${self:custom.project}

PubEcsLogGroup:
  Type: AWS::Logs::LogGroup
  Properties:
    LogGroupName: /ecs/${self:custom.project}-${sls:stage}-pub
    Tags:
      - Key: project
        Value: ${self:custom.project}

PubTaskDefinition:
  Type: AWS::ECS::TaskDefinition
  Properties:
    ContainerDefinitions:
      - Name: ${self:custom.project}
        # Image: hello-world:latest
        Image: !Join
          - ":"
          - - !GetAtt PubDockerRepository.RepositoryUri
            - latest
        Cpu: 0
        PortMappings:
          - ContainerPort: ${self:custom.appPort}
            HostPort: ${self:custom.appPort}
            Protocol: tcp
        Essential: true
        Environment: ${self:custom.pubEnv}
        MountPoints: []
        VolumesFrom: []
        Secrets: ${self:custom.pubSecrets}
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group: /ecs/${self:custom.project}-${sls:stage}-pub
            awslogs-region: ap-southeast-2
            awslogs-stream-prefix: ecs
    Cpu: ${self:custom.cpuPubTaskDefinition}
    TaskRoleArn:
      Fn::ImportValue: !Sub ecsRoleArn
    ExecutionRoleArn:
      Fn::ImportValue: !Sub ecsRoleArn
    Family: ${self:custom.project}-${sls:stage}-pub
    Memory: ${self:custom.memoryPubTaskDefinition}
    NetworkMode: awsvpc
    RequiresCompatibilities:
      - FARGATE
    Tags:
      - Key: project
        Value: ${self:custom.project}

PubEcsService:
  Type: AWS::ECS::Service
  DependsOn:
    - SiteLoadBalancerListener443RuleApexRedirectRule
    - SiteLoadBalancerListener443RulePubForwardRule
  Properties:
    ServiceName: ${self:custom.project}-pub
    Cluster: !Ref EcsCluster
    DesiredCount: ${self:custom.desiredCountPubEcsService}
    LaunchType: FARGATE
    NetworkConfiguration:
      AwsvpcConfiguration:
        SecurityGroups: [{ Fn::GetAtt: [EcsSecurityGroup, GroupId] }]
        Subnets:
          - Fn::ImportValue: !Sub privateSubnet1
          - Fn::ImportValue: !Sub privateSubnet2
    LoadBalancers:
      - ContainerName: ${self:custom.project}
        ContainerPort: ${self:custom.appPort}
        TargetGroupArn: !Ref PubTargetGroup
    TaskDefinition: !Ref PubTaskDefinition
    Tags:
      - Key: project
        Value: ${self:custom.project}
